

# This file was *autogenerated* from the file Inferius-Prime.sage
from sage.all_cmdline import *   # import sage library

_sage_const_742449129124467073921545687640895127535705902454369756401331 = Integer(742449129124467073921545687640895127535705902454369756401331); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_39207274348578481322317340648475596807303160111338236677373 = Integer(39207274348578481322317340648475596807303160111338236677373)
from Crypto.Util.number import long_to_bytes

if __name__ == '__main__':
    n = _sage_const_742449129124467073921545687640895127535705902454369756401331 
    primes = qsieve(n)
    p, q = primes[_sage_const_0 ][_sage_const_0 ], primes[_sage_const_0 ][_sage_const_1 ]

    def euler_totient(p: int, q: int) -> int:
        return (p-_sage_const_1 )*(q-_sage_const_1 )

    phi = euler_totient(p, q)

    e = _sage_const_3 
    d = pow(e, -_sage_const_1 , phi)

    def RSA(m: int, e: int, n: int) -> int:
        ring = Integers(n)
        cipher_text = ring(m) ** e
        return cipher_text

    ct = _sage_const_39207274348578481322317340648475596807303160111338236677373 
    plain_text = int(RSA(ct, d, n))
    plain_text = long_to_bytes(plain_text)
    print(f'plain_text = {plain_text}')

